https://github.com/sahandghavidel/mern-blog/blob/main/client/package.json
https://www.youtube.com/watch?v=Kkht2mwSL_I&list=PLIyBRB9dIsbqI0fG60JLFrMgewzBSA1Pt&index=4


Preparacion de escritorios para el proyecto:

$npm create vite@latest
- Nombre del proyecto escojo client o el ue quiera
- Escojo react
? Select a variant: » - Use arrow-keys. Return to submit.
    TypeScript
    TypeScript + SWC
    JavaScript
>   JavaScript + SWC
    Remix

- escojo JavaScript + SWC
 y aqui me graba todos los alcribos base
 -me voy a la carpeta delmproyecto y $cd client y despues de esto instalo los paquetes que estan el json 
 $npm install

Instalacion de tailwind

- Busco en google taIlwind css para instalarlo en el proyecto  o https://tailwindcss.com/docs/guides/vite
   $npm install -D tailwindcss postcss autoprefixer
   $npx tailwindcss init -p
- reemplazo el contenido de taIlwind.config.js por este:
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

-Reemplazo el contenido de src/index.css por este:

@tailwind base;
@tailwind components;
@tailwind utilities;

-Borro archivos innecesarios como src/app.css, public/vite.svg, src/assets/react.svg
- En index html borro la linea     <link rel="icon" type="image/svg+xml" href="/vite.svg" />
-en src/assets/app.jsx  y lo reemplazo por esto 
  export default function App() {
    return <div>App</div>;
  }
- verifico que tenga esta extencion en visual studio:  ES7+ React/Redux/React-Native snippets, Tailwind CSS IntelliSense

$npm run dev

Github 
- $cd ..
- git init
- git add . 
-commit -m 'escribo en que voy' 
-voy a mi cuenta de github y creo un repositorio para el proyecto. 
-en mi terminal escribo algo como esto: 

 $git remote add origin https://github.com/hegarciagg/Mern-blogHector.git
 $git branch -M main
 $git push -u origin main

CREAR PAGINAS Y RUTAS
- en la carpeta src, creo las paginas de mi aplicacion, Home, Dashbord, Home, Singni, SignUp, y dentro de cada pagina escribo algo como esto para iniciar cada pagina:
 export default function Home() {
  return <div>Home</div>;
}
ó
export default function Dashboard() {
  return <div>Dashboard</div>;
}

- instalo react-router-dom asi:  
   $ npm i react-router-dom
- En src/App.jsx coloco cada una de las rutas de las paginas ue tengo en src/pages de la siguiente manera: 
    import { BrowserRouter, Routes, Route } from "react-router-dom"
    import Home from './pages/Home'
    import About from './pages/About'
     ###demas paginas segun donde esten
    export default function App() {
      return (
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/about" element={<About />} />
          #demas rutas
          </Routes>
        </BrowserRouter>
      );
    }
-Verifico cada uno de las paginas creadas y realizo el commit usando visual studio enla parte derecha le doy clic a  3er icono coo se fuera una red, le doy + a cada cambio y despues comito y envio, verifico en mi repositorio los cambios.

CREAR HEADER COMPONENTS 

- El header es la parte que esta en todas las páginas, para este punto creo una nueva carpeta que se llame components y un archivo header.jsx en el header debemos diseñar el logo, el link a cada una de las paginas, por ahora el archivo debe tener esto
      export default function header() {
  return <div>header</div>;
      } 
- y en app.jsx lo pongo fuera de <Routes> y el path donde estan las otras paginas algo asi como: import Header from "./components/Header";

- Hay varios tonos y estilos para botones y fondos del header, una de las paginas mas usadas en react es https://flowbite-react.com/ 

-Instalo npm i flowbite-react en consola, debo estar en la carpeta de client 
-en el archivo tailwind.config.js adiciono la parte 'node_modules/flowbite-react/**/*.{js,jsx,tsx}',
  queda la parte asi: 
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
      "node_modules/flowbite-react/**/*.{js,jsx,tsx}",
      ],

- cambio esta parte plugins: [require("flowbite/plugin")],
-crtl c y reinicio el servidor $npm run dev 
-viene la parte de configurar el diseño del header, segun se haya estipulado,
-instalo un componente de iconos para adecuar el header $npm install react-icons 

-Revisar como uedo creado el header, debe uedar segun las especificaciones
/*********************/
CREACION DEL SERVIDOR
/**************************/

-Me ubico fuera de la carpeta de cliente, cd .., carpeta principal donde tengo el proyecto, creo otro packetjason 
-$npm init -y 
-creo un carpeta de backend, la puedo llamar API, dentro un archivo que se llame index.js
-instalo express, pilas en la carpeta principal. 
-npm install express
- en el archivo api/index.js configuro esta parte: 

import express from "express";
const app = express();

app.listen(3000, () => {
  console.log("server listening on port 3000");
});

-En el archivo del package.json debajo de descripcion adiciono la linea "type":"module",
-Levanto el servidor con: $node api/index.js
-Adiciono nodemon para no estar reiniciando el servidor: $npm i nodemon , verifico que este instalado en el packaje json
-en el package.json adiciono "dev": "nodemon api/index.js" que es la linea donde esta mi servidor y el que quiero que se levante. pilas borro esta linea: "test": "echo \"Error: no test specified\" && exit 1"
-Tambien adiciono la linea "start": "node api/index.js" debajo de la anterior
-ahora corro el servidor con $npm run dev

Los archivos para subir me han aumentado, debo arrastrar el archivo .gitignore fuera de la carpeta. que quede en la carpeta principal.

despues de hacerlo, lo cómmito 

/************************/
CONECTARSE A MONGODB
/***********************/

- Instaló el paquete mongoose, pilas debo estar en la carpeta de afuera donde esta mi package.json principal.
- npm i mongoose
- en index.js adicciono la linea mongodb://localhost:27017
usuario hegarciagg password: kuUTTJw94M1rDEwq

mongodb+srv://hegarciagg:kuUTTJw94M1rDEwq@cluster0.z47duyi.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

-coloco en api/index.js, estas lineas para conectarme:
import mongoose from "mongoose";

mongoose
  .connect(
    "mongodb+srv://hegarciagg:kuUTTJw94M1rDEwq@cluster0.z47duyi.mongodb.net/MERN-BLOGHECTOR?retryWrites=true&w=majority&appName=Cluster0"
  )
  .then(() => {
    console.log("Mongodb is connected");
  })
  .catch((err) => {
    console.log(err);
  });

- Debo crear la base de datos en mongodb, aplicada a un cluster y ue sea en mi caso de forma gratuita, tambien lo puedo hacer de manera local.

- CREACION DE ARCHIVOS DE ENTORNO 

- Creo los archivos de entorno, creo un archvo ue se llame  .env en la carpeta pricipal. y en este archivo coloco las variables globales, para mi caso:
MONGO=MONGO='mongodb+srv://hegarciagg:kuUTTJw94M1rDEwq@cluster0.z47duyi.mongodb.net/MERN-BLOGHECTOR?retryWrites=true&w=majority&appName=Cluster0'
- Ya para conectarme a la base lo hago mediante  la cadena mongoose.connect(process.env.MONGO). las otras cosas, antes debo instalar el paquete 
$ npm install dotenv , lo import en index.js asi import dotenv from 'dotenv' , dotenv.config();
-en el archivo .gitignore adiciono .env 


CREACION DE MODELO DE USUARIO 

-Creo una carpeta que se llame modelo de usuario y en esta carpeta introduzco por ejemplo el modelo  de la coleccion del usuario, la llamo user.models.js, la colexxion tiene esta forma:

import mongoose from "mongoose";

const userSchema = new mongoose.Schema(
  {
    username: {
      type: String,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: {
      type: String,
      required: true,
    },
  },
  { timestamps: true }
);

const User = mongoose.model("user", userSchema);

export default User;


/******************************/
TESTING API ROUTE TESTING
/*****************************/

-El servidor lo levante en el puerto 3000, para probar que esta operativo lo que hago es en la pagina de index.js adiciono la siguiente linea, despues debo verificar en el browser que me responde http://localhost:3000/test
Parte que va en el api/index.js

app.get("/test", (req, res) => {
  res.json({ message: "respondiendo desde la api" });
});

-La mejor practica es crear un archivo por cada seccion, por usuarios, folder, etcen api creo un folder llamado routes, un archivo en esta carpeta para usuarios por ejemplo llamado user.route.js: con esrta estructura:

import express from "express";
const router = express.Router();
router.get("/test", (req, res) => {
  res.json({ message: "respondiendo desde la api" });
});
export default router;

- listo, ahora importo esta funcion en index.js con la linea import userRoutes from "./routes/user.route.js", como index esta en la misma carpeta de routes puedo subir un nivel y mejor poner: import userRoute from './routes/user.route.js'
- coloco app.use("/api/user", userRoutes); notar que antes tenia la opcion con get, lo cambioa use
- ahora al probar en la pagina web con : http://localhost:3000/api/user me dice que Cannot GET /api/user, debo usar  http://localhost:3000/api/user/test 
- La mejor es crear una carpeta que se llame controladores y alli colocar toda la parte lógica, esta carpeta nueva va dentro de api.
-en user.route.js puedo tener algo como esto: 

import express from "express";
import { test } from "../controllers/user.controller";
const router = express.Router();
router.get("/test", test);
export default router;
 - en user.controller.js puedo tener algo como esto:
 export const test = (req, res) => {
  res.json({ message: "API is working" });
};

/**********************************************/
CREAR A SIGNUP API ROUTE 
/********************************************************/
-instalamos el software insomnia (pass: g31h8ac10387231) para enviar mensajes (post) en json y probar que el frontend lo recibe y estos datos son enviados al backend y se registran en la base de datos.
-en insomnia creo un mensaje json enviado a la direccion http://localhost:3000/api/auth/signup  (POST) de esta forma:
{
	"username" : "usuario1",
	"email":"user1@gmail.com",
	"password": "1234"
}

- recordemos que el start en package.jason es el archivo api\index.js, que es el archivo principal donde esta la conexion a la base de datos,  el modelo de la base de datos está en api\models\user.model.js que tiene unos campos que he especificado como unicos.tengo un archivo donde esta la logica de las funciones (controllers) api\controllers\auth.controller.js y otra parte donde tengo la ruta api\routes\auth.route.js, y ademas estoy corriendo dos procesos, uno que me abre la pagina web o frontend (http://localhost:5173/) donde lance el comando npm run deb dentro de la carpeta client \blogHector\client y otra que esta el backend donde esta toda la logica para conectarme a la base de datos (\blogHector).

- en index.js poder algo como esto:
import authRoutes from "./routes/auth.route.js";
app.use("/api/auth", authRoutes);
-en auth.route.js

import express from "express";
import { signup } from "../controllers/auth.controller.js";
router.post("/signup", signup);
export default router;


- En auth.controler.js
import User from "../models/user.model.js";

export const signup = async (req, res) => {
  const { username, email, password } = req.body;

  if (
    !username ||
    !email ||
    !password ||
    username === "" ||
    email === "" ||
    password === ""
  ) {
    return res.status(400).json({ message: "All fields are reuiered" });
  }
  const newUser = new User({
    username,
    email,
    password,
  });

  try {
    await newUser.save();
    res.json("SignUp successful");
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
      ------------------------
      - Encriptar los passwort 
      ------------------------
- Instalo bcryptJs en el backend, fuera de del cliente  npm i bcryptjs   
- lo llamo en auth.controller.js  --> import bcryptjs from "bcryptjs";
- El authcontrollers quedara algo asi: 
import User from "../models/user.model.js";
import bcryptjs from "bcryptjs";

export const signup = async (req, res) => {
  const { username, email, password } = req.body;

  if (
    !username ||
    !email ||
    !password ||
    username === "" ||
    email === "" ||
    password === ""
  ) {
    return res.status(400).json({ message: "All fields are reuiered" });
  }

  const hashedPassword = bcryptjs.hashSync(password, 10);

  const newUser = new User({
    username,
    email,
    password: hashedPassword,
  });

  try {
    await newUser.save();
    res.json("SignUp successful");
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


/**********************************************/
Adiccionar un middleware y una funcion para manejar los errores

/**********************************************/
- creo otro folder llamado utils, con un archivo llamado error.js
- creo una funcion para crear los errores en en este archivo

export const errorHandler = (statusCode, message) => {
  const error = new Error();
  error.statusCode = statusCode;
  error.message = message;
  return error;
};
-En auth.controller llamo la funcion la funcion:

import { errorHandler } from "../utils/error.js";
-la utilizo de esta manera:

export const signup = async (req, res, next) => {
  const { username, email, password } = req.body;

  if (
    !username ||
    !email ||
    !password ||
    username === "" ||
    email === "" ||
    password === ""
  ) {
    next(errorHandler(400, "All fields are required"));
  }

  const hashedPassword = bcryptjs.hashSync(password, 10);

  const newUser = new User({
    username,
    email,
    password: hashedPassword,
  });

  try {
    await newUser.save();
    res.json("SignUp successful");
  } catch (error) {
    next(error);
  }
};

- en insomnia hago pruebas para enviar información por ejemplo textos en formato json como estos, que me debe mostrar que hay un error y la aplicacion no se crashea:

{
	"username" : "usuario62",
		}

/************************************************/
/*****cracion de pagina de sign UI  ************/
/**********************************************/

-En este punto es solo utilizar html para crear la pagina, es muy util la aplicacion de tailwind, generalmente se crea y formulario  y un diseño muy creativo, el formulario tiene el tipico boton submit para enviar la información.

/*********************************/
Adicionar funcionalidad a la pagina sign up

/***************************************/

adiciono onChange={handleChange} en cada uno de los campos de recoleccion de datos del formulario, queda asi: 

<TextInput
                type="text"
                placeholder="Username"
                id="username"
                onChange={handleChange}
              />


- creo una funcion que va antes del return: 
const handleChange = (e) => {
    console.log(e.target.value);
  };
- la pruebo en inspect de, click derecho, escribo sobre en cada una de las cajas y en el dom debe ver que se recoja la informaición.
-requiero cambiar el archivo de client/vite.config.js para que a futuro pueda usar una direccion diferente a la actualmente tengo en localhost, entonces realizo este cambio asi:

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";

// https://vitejs.dev/config/
export default defineConfig({
  server: {
    proxy: {
      "/ api": {
        target: "http://localhost:3000",
        secure: false,
      },
    },
  },
  plugins: [react()],
});

-Antes de return cambio esta parte para verificar si veo cambios 
import { useState } from "react";

export default function SignUp() {
  const [formData, setFormData] = useState({});

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.id]: e.target.value });
  };
  console.log(formData);

- Me voy a la pagina, le doy en inspect (click derecho), relleno los cambios a ver si me arroja datos en consola
-Me debe aparecer en consola un objeto como el siguiente: 
{
    "username": "hector",
    "email": "dkldlld@djkdjkd.com",
    "password": "dodooddodo"
}

-Ahora necesito obtener los datos de formulario cuando presione el boton submit 
- en el form adiciono el form className="flex flex-col gap-4 " onSubmit={handleSummit}, 
- creo la funcion handleSummit, previniendo que se refresque evenpreventdefault, 

/***********************************/
/*Creacion de la pagina de Footer  */
/************************************/

-En la carpeta de Component creo la pagina de Footer (rfc), Footer.jsx
-en pages/App.jsx adiciono el componente <Footer> a lo ultimo entre </Routes> Y <BrowserRouter>
-Tambien importo la pagina con: import Footer from "./components/Footer";

/**************************/
/****Crear signin Api route*/ 
/**************************/

-Se debe verificar que exista el login y el password y si existe con este valor, da la entrada a la pagina
-llamo la funcion en:  router.post("/signin", signin);  import { signin } from "../controllers/auth.controller.js"; en auth.route
-y en auth.controller.js creo la funcion 
-Aqui hago una verificacion del usuario en la base de datos y el email, tambien debo instalar un paquete para manejar un token, este es jsonwebtoken , este paquete lo instalo en el global fuera de la carpeta cliente, es decir en backend: npm install jsonwebtoken .
-En auth.controller adiciono,  import jwt from "jsonwebtoken";
-en auth.controller creo el codigo para el token. generalmente este codigo no cambia, hay uno de los parametros que es JWT_SECRET, debo crear la clave de este parametro en el archivo .env 
- utilizo insomnia para realizar pruebas, lo configuro como post, envio mensajes hacia la direccion: http://localhost:3000/api/auth/signin, de datos como estos:

{
  "email": "prueba01@gmail.com",
  "password": "prueba"
 }

 - verico cambiando el password, el usuario y los sorrectos.

 /********************************************/
 Completar la funcionalidad de signing pages
 /********************************************/

- Esta página la copio de la signup y borro alguna partes, dejo solo email y password. y cambio Sign In 
- Realizo pruebas de ingreso a la página, si todo esta ok, me debe enviar despues de darle al boton sign in a home, ver la lógica.
- 

/***********************************************/
     REDUX TOOLKIT
/************************************************/

-Configuro enla carpeta de  client (cd client ) redux, $ npm @reduxjs/toolkit react-redux 

-en src creo un folder llamado redux y en este folder creo un archivo llamado store.js 
- y aqui coloco este texto: 

import { configureStore } from "@reduxjs/toolkit";

export const store = configureStore({
  reducer: {},
});

- en el archivo de main.jsx , coloco esta parte: 

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./index.css";
import { store } from "./redux/store.js";
import { Provider } from "react-redux";

ReactDOM.createRoot(document.getElementById("root")).render(
  <Provider store={store}>
    <App />
  </Provider>
);

- creo una carpeta con este archivo client\src\redux\user\userSlice.js , 

/********************************/
instlacion de redux persist 
/***********************************/
Redux Persist es una biblioteca para Redux que proporciona persistencia de estado en aplicaciones React/Redux. En resumen, permite que el estado de tu aplicación Redux se mantenga incluso después de que la página se recargue o se cierre la aplicación y se vuelva a abrir. Esto es útil para mantener el estado de la aplicación, como sesiones de usuario, preferencias del usuario o cualquier otro tipo de datos que desees conservar entre sesiones.
-Lo realizo en la carpeta de cliente $npm install redux-persist
- los cambios los realizo en main.jsx, store.jsx, 

Cambios en client/src/store.jsx:
import { configureStore, combineReducers } from "@reduxjs/toolkit";
import userReducer from "./user/userSlice";
import { persistReducer, persistStore } from "redux-persist";
import storage from "redux-persist/lib/storage";

const rootReducer = combineReducers({
  user: userReducer,
});

const persistConfig = {
  key: "root",
  storage,
  version: 1,
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({ serializableCheck: false }),
});

export const persistor = persistStore(store);

cambios que debo hacer en \blogHector\client\src\main.jsx:

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./index.css";
import { store, persistor } from "./redux/store.js";
import { Provider } from "react-redux";
import { PersistGate } from "redux-persist/integration/react";

ReactDOM.createRoot(document.getElementById("root")).render(
  <PersistGate persistor={persistor}>
    <Provider store={store}>
      <App />
    </Provider>
  </PersistGate>
);

- refresacando la pantalla del navegador se debe almacenar la informacion del usuario.

/***********************************/
GOOGLE OAuth funcionalidad
/************************************/

-Creo una nuenaca pagina llamada client\src\components\OAuth.jsx
-y adiciono en la pagina de Singnin.jsx y Signup la opcion <OAuth/> despues dle boton de signinIn o SignunUp 
-debo habilitar la opcion para utilizar la autentificacion esto lo hago en firebase,  e n www.console.firebase.google.com 
voy a consola, en este sitio me voy a crear un nuevo proyecto, deshabilito google analitics para este proyecto.
- Creo proyecto
-escojo proyect para web, le coloco el nombre del proyecto, regisrtar app 
-Me voy a la carpeta de client y alli instalo $npm install firebase
-creo este archivo /client/src/firebase.js
-pego el codigo que me da google, que es algo como esto:

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyA456g-e34Du-zIJCx0fmF2Ya_fdTzG-NE",
  authDomain: "mern-bloghector.firebaseapp.com",
  projectId: "mern-bloghector",
  storageBucket: "mern-bloghector.appspot.com",
  messagingSenderId: "916859799451",
  appId: "1:916859799451:web:61fcfff0a5b18044d3033e"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

-pero oculto la apikey, creo un archivo .env en client (nota este es diferente al que ya tenia ene global)
-  Adiciono una linea como esta: VITE_FIREBASE_API="AIzaSyA456g-e34Du-zIJCx0fmF2Ya_fdTzG-NE"

-en este punto se deben hacer cambios en firebase.js OAuth.js auth.route.js auth.controller.js usermodel.js 


/*************************************************************/
Actualizar el header component con los usuarios del usuario
/*************************************************************/

-El trabajo se realiza sobre el icono de la foto, lado superior derecho, despues del famoon y antes de toggle trabajamos sobre el archivo del header, en este punto le ponemos el usuario,correo, y la opcion de entrar al Dashboard o salir de la aplicacion:

        {currentUser ? (
          <Dropdown
            arrowIcon={false}
            inline
            label={
              <Avatar alt="user" img={currentUser.profilePicture} rounded />
            }
          >
            <Dropdown.Header>
              <span className="block text-sm">@{currentUser.username}</span>
              <span className="block text-sm font-medium truncate">
                {currentUser.email}
              </span>
            </Dropdown.Header>
            <Link to="/dashboard?tab=profile">
              <Dropdown.Item>Profile</Dropdown.Item>
            </Link>
            <Dropdown.Divider />
            <Dropdown.Item>Sign out</Dropdown.Item>
          </Dropdown>
        ) : (
          <Link to="/sign-in">
            <Button gradientDuoTone="purpleToBlue" outline>
              Sign In
            </Button>
          </Link>
        )}

/*********************************/
Funcionalidad DARK MODE
/*********************************/

-creo una carpeta como y un archivo con estos nombres client\src\redux\theme\themeSlice.js
-en este caso se modificaron los archivos store.js main.jsx, themeProvider.js, header

/**********************************/
Hacer el dashboard privado
/***********************************/

- La idea es revisar ue la pagina del dashboard sea privada 
-Creo la pagina client\src\components\PrivateRoute.jsx con refce
-Adiciono la ruta en client/src/app.jsx , <Route element={<PrivateRoute />} />, import PrivateRoute from "./components/PrivateRoute";
- el archivo client\src\components\PrivateRoute.jsx tiene esto

import { useSelector } from "react-redux";
import { Outlet, Navigate } from "react-router-dom";

export default function PrivateRoute() {
  const { currentUser } = useSelector((state) => state.user);
  return currentUser ? <Outlet /> : <Navigate to="/signin" />;
}

/********************************************/
Completar la pagina de sidebar en el dashboard 
/**********************************************/

- La para esta seccion completamos la paginas Dashboard.js, DashProfile y Dashboard.js, la idea es que cada usuario tenga un dashboard diferente.

/********************************************/
Completar la pagina profile UI 
/***************************************/

-Esta es una de las partes mas importates porque utilizamos el recurso de google firebase, en esta aplicacion debemos limitar el uso de de la subida d elos archivos a 2 MB y trabajamos en los archivos de dashSidebasr y DashProfile, tambien bajamos otra libreria de react que sirve par mortrr cuando se sube un archivo en porcentajes 

/****************************************/
editar api route del usuario
/********************************************/
-En esta parte trabajamos en user.conmtroller index.js user.route y creamos un nuevo archivo verifyUser para poder verificar el uso inapropiado en la creacion de usuarios., se programa que sean mas de 6 caracteres que no tengan espacios etc, las prueba se realizan con imsomnia.
-
